name: SSK CI/CD

on:
  push:
    branches: [ "main", "master", "develop", "DEV-*" ]

jobs:
  lint:
    name: 🔍 Análise de código
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docker/requirements.txt
        pip install ruff mypy bandit pylint pylint-flask pylint-flask-sqlalchemy types-requests types-Flask types-SQLAlchemy types-PyJWT types-pytz
        
    - name: Verificar formatação com Ruff
      continue-on-error: true
      run: |
        python -m ruff check --fix src/
        python -m ruff check src/
        
    - name: Verificar tipagem com mypy
      continue-on-error: true
      run: |
        python -m mypy src/
        
    - name: Verificar vulnerabilidades com Bandit
      continue-on-error: true
      run: |
        python -m bandit -r src/
        
    - name: Verificar código com Pylint
      continue-on-error: true
      run: |
        python -m pylint src/

  build:
    name: 🛠️ Build da aplicação
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Simular build
        run: echo "🔧 Simulando docker build..."

  infra:
    name: ⚙️ Terraform Apply
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Simular infraestrutura
        run: echo "🧱 Simulando terraform init & apply..."

  test:
    name: ✅ Testes
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docker/requirements.txt
          pip install -r requirements-test.txt
          
      - name: Run unit tests
        run: |
          echo "🧪 Executando testes unitários..."
          pytest tests/unit -v --cov=application --cov=domain --cov-report=term --cov-report=xml
          
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          
      - name: Simular teste da API
        run: echo "🧪 Simulando teste em http://localhost:5000/health"

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Mensagem final de deploy
        run: echo "🎉 Deploy simbólico concluído com sucesso!"
